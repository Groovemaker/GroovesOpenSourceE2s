@name Runics Analog Clock
@inputs 
@outputs 
@persist Scale StepsH StepsM H M S StepsS Gong NumCol:vector Color1:vector MidColor:vector Delay Tone1 Tone2 Tone3
@trigger 
interval(1000)
if(first() || duped()){
    #### GONG STUFF
    Gong = 1
    Delay = 1100
    Multiplier = 0.5
    Tone1 = 150 * Multiplier
    Tone2 = 100 * Multiplier
    Tone3 = 180 * Multiplier
    #### CLOCK STUFF
    Color1 = vec(0,0,0)
    MidColor = vec(0,0,0)
    Scale = 0.4
    StepsH = 30
    StepsM = 6
    StepsS = 6
    entity():setAlpha(0)


    holoCreate(1)
    holoPos(1,entity():toWorld(vec(0,0,3*Scale)))
    holoAng(1,entity():toWorld(ang(-90,0,0)))
    holoScale(1,vec(1,1,1)*Scale)
    holoModel(1,"models/props_trainstation/trainstation_clock001.mdl")
    holoParent(1,entity())

    holoCreate(2)
    holoPos(2,entity():toWorld(vec(0,0,1*Scale)))
    holoAng(2,entity():toWorld(ang(0,180,0)))
    holoScale(2,vec(Scale*0.3))
    holoModel(2,"hq_sphere")
    holoColor(2,MidColor)
    holoParent(2,entity())
    
    holoCreate(22)
    holoPos(22,entity():toWorld(vec(0,0,1*Scale)))
    holoAng(22,entity():toWorld(ang(0,180,0)))
    holoScale(22,vec(Scale*0.3))
    holoModel(22,"hq_sphere")
    holoColor(22,MidColor)
    holoParent(22,entity())
    holoAlpha(22,0)
    
    holoCreate(32)
    holoPos(32,entity():toWorld(vec(0,0,1*Scale)))
    holoAng(32,entity():toWorld(ang(0,180,0)))
    holoScale(32,vec(Scale*0.3))
    holoModel(32,"hq_sphere")
    holoColor(32,MidColor)
    holoParent(32,entity())
    holoAlpha(32,0) 
       
    holoCreate(3)
    holoPos(3,entity():toWorld(vec(8*Scale,0,0.5*Scale)))
    holoAng(3,entity():toWorld(ang(0,0,0)))
    holoScale(3,vec(Scale*1.4,Scale*0.1,Scale*0.3))
    holoModel(3,"cube")
    holoColor(3,Color1)
    holoParent(3,2)
    
    holoCreate(4)
    holoPos(4,entity():toWorld(vec(11*Scale,0,0.5*Scale)))
    holoAng(4,entity():toWorld(ang(0,0,0)))
    holoScale(4,vec(Scale*2,Scale*0.1,Scale*0.3))
    holoModel(4,"cube")
    holoColor(4,Color1)
    holoParent(4,22)
    
    holoCreate(5)
    holoPos(5,entity():toWorld(vec(11*Scale,0,0.5*Scale)))
    holoAng(5,entity():toWorld(ang(0,0,0)))
    holoScale(5,vec(Scale*2,Scale*0.04,Scale*0.3))
    holoModel(5,"cube")
    holoColor(5,Color1)
    holoParent(5,32)
}
H = date()["hour",number]
M = date()["min",number]
S = date()["sec",number]
holoAng(2,entity():toWorld(ang(0,-((H*StepsH)),0)))
holoAng(22,entity():toWorld(ang(0,-((M*StepsM)),0)))
holoAng(32,entity():toWorld(ang(0,-((S*StepsS)),0)))
entity():soundPlay(1,0,"buttons/lightswitch2.wav")
soundPitch(1,155)
if(Gong && changed(M) && M == 15 || Gong && changed(M) && M == 30 || Gong && changed(M) && M == 45 || Gong && changed(M) && M == 60){
    timer("tone1",100)
}
if(clk("tone1")){
    entity():soundPlay(2,0,"ambient/rottenburg/rottenburg_belltower.wav")
    soundPitch(2,Tone1)
    timer("tone2",Delay)
}
if(clk("tone2")){
    entity():soundPlay(2,0,"ambient/rottenburg/rottenburg_belltower.wav")
    soundPitch(2,Tone2)    
    timer("tone3",Delay)
}
if(clk("tone3")){
    entity():soundPlay(2,0,"ambient/rottenburg/rottenburg_belltower.wav")
    soundPitch(2,Tone3)
    
}
