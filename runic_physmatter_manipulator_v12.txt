@name Runic Physmatter Manipulator
@persist Hi Lo PropArray:array RandVal WarningDivider PropPositions:array FailsafeDivider PerfBoundary FAILSAFE HoldSnd2:string GrabbedProp:entity GrabbedPropLast:entity PropHolos:array HoldSnd:string AimerStack:entity StackDir:string StackOffset:number Bstuff:entity PropStackArray:array Pushing TT SoundTT Play IT Aimer:entity AimerPunt:entity AimerOrbit:entity Mode Modelen

runOnChat(1)
if(first() || duped()){
    # DO NOT EDIT UNLESS IT CRASHES DUE TO HIGH OPS!!!!!
    PerfBoundary = 3
    ####################################################
    FAILSAFE = 0
    FailsafeDivider = 2
    WarningDivider = 2.5
    Hi = 50
    Lo = 100
    RandVal = 3500
    # Set up stuff
    HoldSnd = "ambience/mechwhine.wav"
    HoldSnd2 = "weapons/physcannon/energy_sing_loop4.wav"
    Aimer = world()
    AimerOrbit = world()
    AimerPunt = world()
    Mode = 1
    Modelen = 5
    IT = 1
    StackDir = "right"
    StackOffset = 25
    owner():soundPlay(1,0,"items/suitchargeok1.wav")
    soundPitch(1,77)
    timer("Idle",500)
    
    # Print Disclaimer
    hint("PRESS ALT TO CHANGE MODES.",7)
    hint("HAVE A SAFE DAY!",3)
    hint("ATOMIC WAR, WORLD WAR 3, MINGING, PERMABANS, HAXX0R ATTACKS ETC ETC",3)
    hint("RUNIC CANNOT BE PUT INTO JAIL FOR:",3)
    hint("DISCLAIMER:",3)
    hint("PLEASE HANDLE THIS DEVICE WITH CARE!",3)
    hint("WELCOME TO RUNICS PHYSMATTER MANIPULATOR!",7)
    holoCreate(1)
    holoAlpha(1,0)
    holoPos(1,owner():toWorld(vec(0,0,40)))
    holoParent(1,owner())
    
    holoCreate(2)
    holoAlpha(2,0)
    holoPos(2,owner():toWorld(vec(0,0,40)))
    holoParent(2,owner())
    
    holoCreate(3)
    holoAlpha(3,0)

    holoCreate(22)
    holoAlpha(22,0)
    holoScale(22,vec(3))
    
    holoCreate(10)
    holoAlpha(10,0)
    
    timer("main",Hi)
    timer("fls",Hi)
    timer("Loop.Offensive",Hi)
    timer("Loop.Orbit",Hi)
    timer("Loop.Gravity",Hi)
    timer("Loop.Stacker",Hi)

}
if(clk("main")){
        if(owner():weapon():type() == "weapon_physgun" && FAILSAFE == 0){
        Aimer = owner():aimEntity()
        # Attack 1 Modes
        if(owner():keyAttack1()){
            if(GrabbedProp:isValidPhysics()){
                Effect = effect() 
                Effect:setMagnitude(35) 
                Effect:setEntity(GrabbedProp)
                Effect:play("TeslaHitBoxes")
            }
            if(Aimer:type():find("worldspawn") || !Aimer:isValidPhysics()){
            }else{
                GrabbedProp = Aimer
            }
            if(GrabbedProp != world()){
                Pitch = sin((curtime()*1)* 131)*5+105+(GrabbedProp:vel():length()/22)
            }else{
                Pitch = sin((curtime()*1)* 131)*5+95
            }
            soundVolume(6,3)
            soundPitch(6,Pitch)  
            soundPitch(5,Pitch)  
        } 
            
        
        
        # Attack 1 changed to on
        if(changed(owner():keyAttack1()) && owner():keyAttack1()){
            if(Mode == 5){
                GrabbedProp = owner():aimEntity()
                findInSphere(GrabbedProp:pos(),500)
                Props = findToArray()
                    for(I=1,Props:count()){
                        Prop = Props[I,entity]
                        if(Prop != GrabbedProp && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                            PropStackArray:pushEntity(Prop) 
                        }
                    } 
            }elseif(Mode == 3){
            }
            
            holoEntity(1):soundPlay(3,0,"weapons/physcannon/physcannon_pickup.wav")
            holoEntity(1):soundPlay(6,0,HoldSnd)
            holoEntity(1):soundPlay(5,0,HoldSnd2)
            
        }
        
        # Modechanger
        if(changed(owner():keyWalk()) && owner():keyWalk()){
            
            if(Mode < Modelen){
                Mode++
            }else{
                Mode = 1
            }
            
            # Build
            if(Mode == 1){
                AimerPunt = world()
                Aimer = world()
                hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Build Mode Enabled",3)
            }
            
            # Offensive
            if(Mode == 2){
                hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Offensive Mode Enabled",3)
            }
            
            # Orbit
            if(Mode == 3){
                hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Orbit Mode Enabled",3)
            }
            
            # Gravity
            if(Mode == 4){
                hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Gravity Mode Enabled",3)
            }    
            
            # Stack
            if(Mode == 5){
                hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Stack Mode Enabled",3)
            }  
            
            owner():soundPlay(4,0,"buttons/lightswitch2.wav")
            soundPitch(4,88)
            owner():soundPlay(7,0,"hl1/fvox/fuzz.wav")
            soundPitch(4,88)
            
            
        }
        
        
        # Attack 1 changed to off

    
        # Push Functions
        
        ## Offensive
        elseif(Pushing == 1 && Mode == 2){
        
            holoEntity(1):soundPlay(1,0,"weapons/physcannon/superphys_launch3.wav")
            soundPitch(2,randint(100,144))
            GrabbedPropLast:propFreeze(0)
            GrabbedPropLast:applyForce((owner():eye()+owner():attachmentPos("head")) * (GrabbedPropLast:mass()) * 54311 )
            GrabbedPropLast:propNotSolid(0)
            holoPos(22,GrabbedPropLast:pos())
            holoParent(22,GrabbedPropLast)
            holoEntity(22):setTrails(33,2,3,"trails/laser",owner():getWeaponColor(),255)
            soundStop(2)
            Pushing = 0
            GrabbedPropLast = world()
            timer("removetrail",1000)
            
        }
        
        
        ## Build
        elseif(Pushing == 1 && Mode == 1){
            
            holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
            Pushing = 0
            
        }
        
        ## Stack
        elseif(Pushing == 1 && Mode == 5){
            
            foreach(Y,Prop2:entity = PropStackArray){
    
                if(StackDir == "right"){
                    Prop2:setPos(GrabbedPropLast:pos()+GrabbedPropLast:right()*StackOffset*Y)
                }elseif(StackDir == "left"){
                    Prop2:setPos(GrabbedPropLast:pos()-GrabbedPropLast:right()*StackOffset*Y)
                }elseif(StackDir == "up"){
                    Prop2:setPos(GrabbedPropLast:pos()+GrabbedPropLast:up()*StackOffset*Y)
                }elseif(StackDir == "down"){
                    Prop2:setPos(GrabbedPropLast:pos()-GrabbedPropLast:up()*StackOffset*Y)
                }elseif(StackDir == "front"){
                    Prop2:setPos(GrabbedPropLast:pos()+GrabbedPropLast:forward()*StackOffset*Y)
                }elseif(StackDir == "back"){
                    Prop2:setPos(GrabbedPropLast:pos()-GrabbedPropLast:forward()*StackOffset*Y)
                }
                Prop2:setAng(GrabbedPropLast:toWorld(ang(0,0,0)))
                Prop2:propFreeze(GrabbedPropLast:isFrozen())
                Prop2:constraintBreak("nocollide")
                
            }
    
            PropArray:clear()
            PropArray = array()
            PropStackArray = array()
            PropStackArray:clear()  
            holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
            Pushing = 0
            GrabbedPropLast = world()
        }
        elseif(Pushing == 1 && Mode == 3 || Pushing == 1 && Mode == 4){
            PropArray:clear()
            PropArray = array()
            PropStackArray = array()
            PropStackArray:clear()
            holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
            soundPitch(2,randint(100,144))
            Pushing = 0
        }
        
        if(changed(owner():keyAttack1()) && owner():keyAttack1() != 1){          
            GrabbedPropLast = GrabbedProp
            GrabbedProp = world()
            # Do Push Functions
            Pushing = 1
            soundStop(6)
            soundStop(5)
            
        }
    }
    # Cleanup trails
    if(clk("removetrail")){
        holoEntity(22):deparent()
        holoEntity(22):removeTrails()
        holoPos(22,entity():pos())  
    }
    

    holoPos(10,owner():weapon():attachmentPos("muzzle"))
    holoParent(10,owner():weapon())
    holoParentAttachment(10,owner():weapon(),"muzzle")
    if(perf(PerfBoundary)){
        timer("main",Hi)
    }else{
        timer("main",Lo)
    }
    

}

# The Lightning Sparks are coupled to the Ops, push it to the limit! :)
if(clk("fls")){
    if(ops() > softQuota() / FailsafeDivider){
        FAILSAFE = 1
    }
    if(ops() > softQuota() / WarningDivider){
        WARNING = 1
    }
    if(changed(FAILSAFE) && FAILSAFE == 1){
        hint("Use [Mode + Fire] to exit Failsafe!",7)
        hint("Failsafe Enabled! Ops: "+ops()+"/"+softQuota() / FailsafeDivider,7)
        for(I=1,12){soundStop(I)}
        holoEntity(1):soundPlay(12,0,"npc/attack_helicopter/aheli_damaged_alarm1.wav")
        holoEntity(1):soundPlay(11,0,"npc/turret_floor/die.wav")
        
    }
    if(changed(WARNING) && WARNING == 1){
        hint("WARNING! Ops: "+ops()+"/"+softQuota() / WarningDivider,7)
        holoEntity(1):soundPlay(12,0,"ambient/alarms/klaxon1.wav")
        WARNING = 0
        
    }
    if(FAILSAFE == 1 && owner():keyWalk() && owner():keyAttack1()){
        FAILSAFE = 0

    }
    if(changed(FAILSAFE) && FAILSAFE == 0){
        hint("Failsafe Disabled! Ops: "+ops()+"/"+softQuota() / FailsafeDivider,7)
        holoEntity(1):soundPlay(3,0,"ambient/machines/combine_terminal_idle4.wav")
        soundPitch(1,150)
        Mode = 1
    }
    if(perf(PerfBoundary)){
        timer("fls",Hi*0.8)
    }else{
        timer("fls",Lo*0.8)
    }
}
if(clk("Idle")){
    if(owner():weapon():type() == "weapon_physgun" && FAILSAFE == 0){
        holoEntity(1):soundPlay(8,0,"weapons/physcannon/superphys_small_zap"+randint(1,3)+".wav")
        soundPitch(8,randint(100,144))
        Effect2 = effect() 
        Effect2:setMagnitude(3) 
        Effect2:setEntity(owner():weapon())
        Effect2:play("TeslaHitBoxes")
        RandVal = (4500*randint(0.1,2))/(ops() / 50) *1
    }
    timer("Idle",RandVal)
}


#### MODE FUNCTIONS

if(clk("Loop.Offensive")){

    if(perf(PerfBoundary)){
        timer("Loop.Offensive",Hi*1.1)
    }else{
        timer("Loop.Offensive",Lo)
    }
}
if(clk("Loop.Gravity")){
    
    # Gravity Mode
    if(Mode == 4 && owner():keyAttack1()){
        findInSphere(owner():aimPos(),355)
        Props = findToArray()
        for(I=1,Props:count()){
            Prop = Props[I,entity]
            if(Prop != GrabbedProp && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                if(!owner():aimEntity():type():find("prop")){
                    Prop:applyForce((owner():aimPos()-Prop:pos()) * (Prop:mass()) * 1 )
                }
            }
        }         
    }

    if(perf(PerfBoundary)){
        timer("Loop.Gravity",Hi*1.1)
    }else{
        timer("Loop.Gravity",Lo*1.1)
    }
}
if(clk("Loop.Orbit")){
    
    # Orbit Mode
    if(Mode == 3 && owner():keyAttack1() && FAILSAFE == 0){
        foreach(X,Prop2:entity = PropArray){
            if(perf(PerfBoundary*3.55)){
                Prop2:applyForce((GrabbedProp:pos()-Prop2:pos()) * (Prop2:mass()) * 1 )
            }
        }

        findInSphere(GrabbedProp:pos(),355)
        Props = findToArray()
        for(I=1,Props:count()){
            Prop = Props[I,entity]
            if(Prop != GrabbedProp && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                PropArray:pushEntity(Prop) 
            }
        }
    }
    if(perf(PerfBoundary)){
        timer("Loop.Orbit",Hi*1.1)
    }else{
        timer("Loop.Orbit",Lo*1.1)
    }
}

if(clk("Loop.Stacker")){
    
    # Orbit Mode
    if(Mode == 5 && owner():keyAttack1()){
        for(Y=1,PropStackArray:count()){
            Prop2 = PropStackArray[Y,entity]
            Prop2:propFreeze(0)
            Prop2:constraintBreak("nocollide")
            noCollide(Prop2,PropStackArray[Y-1,entity])
            noCollide(Prop2,GrabbedProp)
            if(StackDir == "right"){
                Prop2:setPos(GrabbedProp:pos()+GrabbedProp:right()*StackOffset*Y)
            }elseif(StackDir == "left"){
                Prop2:setPos(GrabbedProp:pos()-GrabbedProp:right()*StackOffset*Y)
            }elseif(StackDir == "up"){
                Prop2:setPos(GrabbedProp:pos()+GrabbedProp:up()*StackOffset*Y)
            }elseif(StackDir == "down"){
                Prop2:setPos(GrabbedProp:pos()-GrabbedProp:up()*StackOffset*Y)
            }elseif(StackDir == "front"){
                Prop2:setPos(GrabbedProp:pos()+GrabbedProp:forward()*StackOffset*Y)
            }elseif(StackDir == "back"){
                Prop2:setPos(GrabbedProp:pos()-GrabbedProp:forward()*StackOffset*Y)
            }
            Prop2:setAng(GrabbedProp:toWorld(ang(0,0,0)))
            Prop2:propFreeze(1)
        }
    }
    
    if(perf(PerfBoundary)){
        timer("Loop.Stacker",Hi)
    }else{
        timer("Loop.Stacker",Lo)
    }
}
            # Chat Cmds for Stacker etc
            if(chatClk(owner())){
                Expl = owner():lastSaid():explode(" ")
                if(Expl:string(1) == "!dir"){
                    hideChat(1)
                    StackDir = Expl:string(2)
                }
                if(Expl:string(1) == "!o"){
                    hideChat(1)
                    StackOffset = Expl:string(2):toNumber()
                }

            }

