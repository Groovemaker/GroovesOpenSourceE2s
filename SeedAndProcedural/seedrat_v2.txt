@name Runics Seeded Generation Rat Demo

@persist [HT CT]:table [HN CN I SpawnCounter] [ScaleFactor] Indices [DefaultColor DefaultScale]:vector Seed:string Stronk1 Stronk2

###########################################################################################################

########### These are for Generation. Advanced users only, ported from js "srand" module. ##############

###########################################################################################################

function number srand(Sd:string,Max,Min){
    Serd = 0xFF
    Str = Sd
    StrC = Str:explode("")
    for(I=1, StrC:count()){
        Serd = bXor(0xFF,toUnicodeByte(StrC[I,string]))
        #print(I+" "+Serd)
    }
    SE = (Serd * 9301 + 4923397) % 256
    return Min + (Serd / 256) * (Max - Min)
}
###########################################################################################################

############ Spawn Function, Scroll further down for first()! #############################################

###########################################################################################################
function spawnrat(Base:entity,Indices2){
    BodyColor = vec4(srand(Seed:sub(1,3),1,777) * Stronk1,srand(Seed:sub(3,6),1,777) * Stronk1,srand(Seed:sub(7,8),1,777) * 1,255)*1
    EyeColor = vec4(srand(Seed:sub(1,4),1,255) * Stronk2,srand(Seed:sub(4,8),1,255) * Stronk2,srand(Seed:sub(6,12),1,255) * 1,255)*2
    ScaleFactor = 2
    Indices = 1
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(3.251, 0.585, 0.5715), ang(0, 0, 90), vec(0.05, 0.05, 0.05), "models/pac/default.mdl", "models/debug/debugwhite", EyeColor, 1)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(0, 0, 0), ang(0, 0, 90), vec(0.55, 0.2, 0.25), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.9741, -0.0084, 0.0605), ang(0, 0, 90), vec(0.035, 0.035, 0.035), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.9878, -0.0033, 0.0605), ang(0, 0, 90), vec(0.2475, 0.1125, 0.1125), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -18.6241), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, 0.0984, 0.0137), ang(0, 0, 13.8097), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.8296, -1.056, 1.2695), ang(0, 0, 90), vec(0.04, 0.1, 0.1), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -172.876), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(3.251, -0.585, 0.5715), ang(0, 0, 90), vec(0.05, 0.05, 0.05), "models/pac/default.mdl", "models/debug/debugwhite", EyeColor, 1)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.708, -0.0067, 0.0605), ang(0, 0, 90), vec(0.275, 0.125, 0.125), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -159.7766), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.8296, 1.0556, 1.2695), ang(0, 0, 90), vec(0.04, 0.1, 0.1), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -188.71), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -3.5168), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)

    function table:holo(Indices2L) {
        local Index = This[1, number] * Indices * 100 * Indices2L
        if (This[2,entity]:isValid()) { Entity = This[2,entity] } else { Entity = holoEntity(This[2,number]) }
        if (This[3,entity]:isValid()) { Parent = This[3,entity] } else { Parent = holoEntity(This[3,number]) }
        local Rescale = (This[7, vector] / (This[4, number] ? 12 : 1)) * ScaleFactor
        holoCreate(Index, Entity:toWorld(This[5, vector] * ScaleFactor), Rescale, Entity:toWorld(This[6, angle]), DefaultColor, This[8, string] ?: "cube")
        holoParent(Index, Parent)
        holoDisableShading(Index,This[11,number])
        holoMaterial(Index, This[9, string])
        holoColor(Index, This[10, vector4])
    }

    while (perf() & holoCanCreate() &  SpawnCounter < HN) {
        SpawnCounter++
        HT[SpawnCounter, table]:holo(Indices2)
        if (SpawnCounter >= HN) {
            break
        }
    }
}

###########################################################################################################
###########################################################################################################
###########################################################################################################




if(first() || dupefinished()){

    ### Change Seed Here! It has to have at least 12 places. ###
    
    Seed = "Test124hisIsTheT32342"
    
    ##########################
    
    Stronk1 = 1
    Stronk2 = 1
    if(Seed:explode(""):count() < 12){
        error("Seed has to be 12 places long.")
    }
    Lul = propSpawn("models/beer/wiremod/gate_e2.mdl",ang(0,0,0),1)
    Lul:setAlpha(0)
    spawnrat(Lul,1)
    Lul:propFreeze(0)
    
}
