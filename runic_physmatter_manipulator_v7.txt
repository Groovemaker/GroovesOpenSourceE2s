@name Runic Physmatter Manipulator
@persist PropArray:array PropPositions:array GrabbedProp:entity GrabbedPropLast:entity PropHolos:array HoldSnd:string AimerStack:entity StackDir:string StackOffset:number Bstuff:entity PropStackArray:array Pushing TT SoundTT Play IT Aimer:entity AimerPunt:entity AimerOrbit:entity Mode Modelen
interval(1)
runOnChat(1)
if(first() || duped()){
    
    # Set up stuff
    HoldSnd = "weapons/physcannon/energy_sing_loop4.wav"
    Aimer = world()
    AimerOrbit = world()
    AimerPunt = world()
    Mode = 1
    Modelen = 5
    IT = 1
    StackDir = "right"
    StackOffset = 25
    owner():soundPlay(1,0,"items/suitchargeok1.wav")
    soundPitch(1,77)
    timer("Idle",500)
    
    # Print Disclaimer
    hint("PRESS ALT TO CHANGE MODES.",7)
    hint("HAVE A SAFE DAY!",3)
    hint("ATOMIC WAR, WORLD WAR 3, MINGING, PERMABANS, HAXX0R ATTACKS ETC ETC",3)
    hint("RUNIC CANNOT BE PUT INTO JAIL FOR:",3)
    hint("DISCLAIMER:",3)
    hint("PLEASE HANDLE THIS DEVICE WITH CARE!",3)
    hint("WELCOME TO RUNICS PHYSMATTER MANIPULATOR!",7)
    holoCreate(1)
    holoAlpha(1,0)
    holoPos(1,owner():toWorld(vec(0,0,40)))
    holoParent(1,owner())
    
    holoCreate(2)
    holoAlpha(2,0)
    holoPos(2,owner():toWorld(vec(0,0,40)))
    holoParent(2,owner())

    holoCreate(3)
    holoAlpha(3,0)

    holoCreate(22)
    holoAlpha(22,0)
    holoScale(22,vec(3))
}
if(owner():weapon():type() == "weapon_physgun"){
    
    # Attack 1 Modes
        if(owner():keyAttack1()){

            AimerPunt = owner():aimEntity()
            Aimer = owner():aimEntity()
            if(Aimer:type():find("worldspawn") || !Aimer:isValidPhysics()){
            }else{
                GrabbedProp = Aimer
            }
            if(GrabbedProp != world()){
                Pitch = sin((curtime()*1)* 131)*5+99+(GrabbedProp:vel():length()/22)
            }else{
                Pitch = sin((curtime()*1)* 131)*5+80
            }
            soundVolume(6,3)
            soundPitch(6,Pitch)  
                      
            # Stack  Mode
            if(Mode == 5){
                for(Y=1,PropStackArray:count()){
                    Prop2 = PropStackArray[Y,entity]
                    Prop2:propFreeze(0)
                    Prop2:constraintBreak("nocollide")
                    noCollide(Prop2,PropStackArray[Y-1,entity])
                    noCollide(Prop2,AimerStack)
                    if(StackDir == "right"){
                        Prop2:setPos(AimerStack:pos()+AimerStack:right()*StackOffset*Y)
                    }elseif(StackDir == "left"){
                        Prop2:setPos(AimerStack:pos()-AimerStack:right()*StackOffset*Y)
                    }elseif(StackDir == "up"){
                        Prop2:setPos(AimerStack:pos()+AimerStack:up()*StackOffset*Y)
                    }elseif(StackDir == "down"){
                        Prop2:setPos(AimerStack:pos()-AimerStack:up()*StackOffset*Y)
                    }elseif(StackDir == "front"){
                        Prop2:setPos(AimerStack:pos()+AimerStack:forward()*StackOffset*Y)
                    }elseif(StackDir == "back"){
                        Prop2:setPos(AimerStack:pos()-AimerStack:forward()*StackOffset*Y)
                    }
                    Prop2:setAng(AimerStack:toWorld(ang(0,0,0)))
                    Prop2:propFreeze(1)
                }

            }
            
            # Orbit Mode
            if(Mode == 3){
                foreach(X,Prop2:entity = PropArray){
                    Prop2:applyForce((GrabbedProp:pos()-Prop2:pos()) * (Prop2:mass()) * 0.4 )
                }
                if(perf(4)){
                findInSphere(GrabbedProp:pos(),355)
                    Props = findToArray()
                    for(I=1,Props:count()){
                        Prop = Props[I,entity]
                        if(Prop != GrabbedProp && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                            PropArray:pushEntity(Prop) 
                        }
                    } 
                }
            
            # Gravity Mode
            }elseif(Mode == 4){
                if(perf(4)){
                findInSphere(owner():aimPos(),355)
                    Props = findToArray()
                    for(I=1,Props:count()){
                        Prop = Props[I,entity]
                        if(Prop != GrabbedProp && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                            if(!owner():aimEntity():type():find("prop")){
                                Prop:applyForce((owner():aimPos()-Prop:pos()) * (Prop:mass()) * 0.3 )
                            }
                        }
                    } 
                }        
            }
        } 
        
    
    
    # Attack 1 changed to on
    if(changed(owner():keyAttack1()) && owner():keyAttack1()){
        if(Mode == 5){
            AimerStack = owner():aimEntity()
            if(perf(4)){
            findInSphere(Aimer:pos(),1500)
            Props = findToArray()
                for(I=1,Props:count()){
                    Prop = Props[I,entity]
                    if(Prop != Aimer && Prop:owner() == owner() && Prop:type():find("prop_physics") || Prop:type():find("prop_ragdoll") || Prop:type():find("prop_physics_multiplayer") && PropArray:count() < 20){
                        PropStackArray:pushEntity(Prop) 
                    }
                } 
            }
        }elseif(Mode == 3){
            AimerOrbit = owner():aimEntity()
        }
        
        holoEntity(1):soundPlay(3,0,"weapons/physcannon/physcannon_pickup.wav")
        holoEntity(1):soundPlay(6,0,HoldSnd)
        soundPitch(1,77)
        
    }
    
    # Modechanger
    if(changed(owner():keyWalk()) && owner():keyWalk()){
        
        if(Mode < Modelen){
            Mode++
        }else{
            Mode = 1
        }
        
        # Build
        if(Mode == 1){
            AimerPunt = world()
            Aimer = world()
            hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Build Mode Enabled",3)
        }
        
        # Offensive
        if(Mode == 2){
            hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Offensive Mode Enabled",3)
        }
        
        # Orbit
        if(Mode == 3){
            hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Orbit Mode Enabled",3)
        }
        
        # Gravity
        if(Mode == 4){
            hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Gravity Mode Enabled",3)
        }    
        
        # Stack
        if(Mode == 5){
            hint("Mode "+Mode+ ": Runic Physmatter Manipulator: Stack Mode Enabled",3)
        }  
        owner():soundPlay(4,0,"buttons/lightswitch2.wav")
        soundPitch(4,88)
        owner():soundPlay(7,0,"hl1/fvox/fuzz.wav")
        soundPitch(4,88)
        
        
    }
    
    
    # Attack 1 changed to off
    elseif(changed(owner():keyAttack1()) && owner():keyAttack1() != 1){
        GrabbedPropLast = GrabbedProp
        GrabbedProp = world()
        
        # Do Push Functions
        Pushing = 1
        soundStop(6) 
    }

# Push Functions

## Offensive
elseif(Pushing == 1 && Mode == 2){

    holoEntity(1):soundPlay(1,0,"weapons/physcannon/superphys_launch3.wav")
    soundPitch(2,randint(100,144))
    GrabbedPropLast:propFreeze(0)
    GrabbedPropLast:applyForce((owner():eye()+owner():attachmentPos("head")) * (GrabbedPropLast:mass()) * 54311 )
    GrabbedPropLast:propNotSolid(0)
    holoPos(22,GrabbedPropLast:pos())
    holoParent(22,GrabbedPropLast)
    holoEntity(22):setTrails(122,11,3,"trails/laser",owner():getWeaponColor(),255)
    soundStop(2)
    Pushing = 0
    GrabbedPropLast = world()
    timer("removetrail",1000)
}


## Build
elseif(Pushing == 1 && Mode == 1){
    holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
    Pushing = 0
}

## Stack
elseif(Pushing == 1 && Mode == 5){
    foreach(X,Prop2:entity = PropStackArray){
        Prop2:propFreeze(AimerStack:isFrozen())
        Prop2:constraintBreak("nocollide")
    }
    PropStackArray:clear()
    PropStackArray = array()
    holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
    Pushing = 0
    AimerStack = world()   
}
elseif(Pushing == 1 && Mode == 3 || Pushing == 1 && Mode == 4){
    PropArray:clear()
    PropArray = array()
    holoEntity(1):soundPlay(1,0,"weapons/physcannon/physcannon_drop.wav")
    soundPitch(2,randint(100,144))
    Pushing = 0
}
}else{
    Pushing = 0
}
# Cleanup trails
if(clk("removetrail")){
    holoEntity(22):deparent()
    holoEntity(22):removeTrails()
    holoPos(22,entity():pos())  
}

if(chatClk(owner())){
    Expl = owner():lastSaid():explode(" ")
    if(Expl:string(1) == "!dir"){
        hideChat(1)
        StackDir = Expl:string(2)
    }
    if(Expl:string(1) == "!o"){
        hideChat(1)
        StackOffset = Expl:string(2):toNumber()
    }
}
RandVal = 3500*randint(0.4,2)
if(clk("Idle")){
    if(owner():weapon():type() == "weapon_physgun"){
        holoEntity(1):soundPlay(5,0,"weapons/physcannon/superphys_small_zap"+randint(1,3)+".wav")
        soundPitch(2,randint(100,144))
    }
    timer("Idle",RandVal)
}


