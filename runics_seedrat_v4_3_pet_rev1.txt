@name Runics_Seedrat_v4.0
@persist Seed:string Stronk1 Stronk2 SeedArray:array Rat:entity NewSeed:string D [HT CT]:table CurSeed:string [HN CN I SpawnCounter] [ScaleFactor] Indices [DefaultColor DefaultScale]:vector


# Documentation:

# Type "!seed <your seed here>" in chat to change seed. Each seed MUST have 8 places. Symbols and Alphanumerics work.
# Type "!randseed" to randomize it.

# Example Seeds

# 9VTI!5K7 - Blueish one
# AFl$GHFA - Orange one with green eyes
# 51GF)PRD - Pretty much normal brown rat with yellow eyes
# 24uqMTAS - Blue reddish one, yellow eyes









function number srand(Sd:string){
    Serd = 0xFF
    Str = Sd
    StrC = Str:explode("")
    for(I=1, StrC:count()){
        Serd = bXor(0xFF,toUnicodeByte(StrC[I,string]))
        #print(I+" "+Serd)
    }
    SE = (Serd * 3333 % 5555) / 400
    return SE
}

function string randomseed(){
    Payload = "ABC!\"$%&/(OPQRS3456TFGHIJVWXYDEU890Z127KLMN)=?@":explode("")
    SeedArray = array()
    for(I=1,8){
        for(I=1,11){
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
            Random = randint(1,Payload:count())
        }
        SeedArray:pushString(Payload[Random,string])
    }
    Sreed = SeedArray:concat("")
    return Sreed
}



function number seedcolor(Sd:string,Max,Min){
    Serd = 0xFF
    Str = Sd

    StrC = Str:explode("")
    for(I=1, StrC:count()){
        Serd = bXor(0xFF,toUnicodeByte(StrC[I,string]))
        #print(I+" "+Serd)
    }
    SE = (Serd * 9301 + 4923397) % 233
    return Min + (Serd / 233) * (Max - Min)
}

function spawnrat(Seed:string,Base:entity,Indices2){
    Stronk1 = 0.5
    Stronk2 = 1
    CurSeed = Seed
    BodyColor = vec4(seedcolor(Seed:sub(1,6),1,1255) * Stronk1,seedcolor(Seed:sub(4,8),1,1255) * Stronk1,seedcolor(Seed:sub(1,4),1,1255) * Stronk1,255)*1
    EyeColor = vec4(seedcolor(Seed:sub(1,4),1,255) * Stronk2,seedcolor(Seed:sub(4,8),1,255) * Stronk2,seedcolor(Seed:sub(1,5),1,255) * Stronk1,255)*4
    ScaleFactor = 2
    Indices = 1
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(3.251, 0.585, 0.5715), ang(0, 0, 90), vec(0.05, 0.05, 0.05), "models/pac/default.mdl", "models/debug/debugwhite", EyeColor, 1)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(0, 0, 0), ang(0, 0, 90), vec(0.55, 0.2, 0.25), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.9741, -0.0084, 0.0605), ang(0, 0, 90), vec(0.035, 0.035, 0.035), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.9878, -0.0033, 0.0605), ang(0, 0, 90), vec(0.2475, 0.1125, 0.1125), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -18.6241), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, 0.0984, 0.0137), ang(0, 0, 13.8097), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.8296, -1.056, 1.2695), ang(0, 0, 90), vec(0.04, 0.1, 0.1), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -172.876), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(3.251, -0.585, 0.5715), ang(0, 0, 90), vec(0.05, 0.05, 0.05), "models/pac/default.mdl", "models/debug/debugwhite", EyeColor, 1)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.708, -0.0067, 0.0605), ang(0, 0, 90), vec(0.275, 0.125, 0.125), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -159.7766), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(2.8296, 1.0556, 1.2695), ang(0, 0, 90), vec(0.04, 0.1, 0.1), "models/pac/default.mdl", "models/shadertest/envball_6", BodyColor, 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -188.71), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)
    I++, HN++, HT[HN,table] = table(I, Base, Base, 0, vec(4.5195, -0.098, 0.014), ang(0, 0, -3.5168), vec(0.01, 0.0575, 0.01), "models/hunter/blocks/cube025x075x025.mdl", "models/debug/debugwhite", vec4(59, 59, 59, 255), 0)

    function table:holo(Indices2L) {
        local Index = This[1, number] * Indices * 100 * Indices2L
        if (This[2,entity]:isValid()) { Entity = This[2,entity] } else { Entity = holoEntity(This[2,number]) }
        if (This[3,entity]:isValid()) { Parent = This[3,entity] } else { Parent = holoEntity(This[3,number]) }

        local Rescale = (This[7, vector] / (This[4, number] ? 12 : 1)) * ScaleFactor
        holoCreate(Index, Entity:toWorld(This[5, vector] * ScaleFactor), Rescale, Entity:toWorld(This[6, angle]), DefaultColor, This[8, string] ?: "cube")
        holoParent(Index, Parent)
        holoDisableShading(Index,This[11,number])
        holoMaterial(Index, This[9, string])
        holoColor(Index, This[10, vector4])
        if(1){
            holoPos(Index,holoEntity(Index):pos()+(vec(0,0,2)))
        }else{
        }
    }

    while (perf() & holoCanCreate() &  SpawnCounter < HN) {
        SpawnCounter++
        HT[SpawnCounter, table]:holo(Indices2)
        if (SpawnCounter >= HN) {
            break
        }
    }
}


if(first() || dupefinished()){
    function init(SSeed:string){
        #entity():streamStart(1,"https://dl.dropboxusercontent.com/s/7ixvixrlrntzrhi/eradicationbell.mp3?dl=1",1)   
        print(SSeed)
        if(SSeed:explode(""):count() != 8){
            error("Seed has to be 8 places long.")
        }
        Rat = propSpawn("models/beer/wiremod/gate_e2.mdl",ang(0,0,0),1)
        #Rat:setPos(entity():pos())
        Rat:setAlpha(0)
        Rat:propNotSolid(1)
        spawnrat(SSeed,Rat,1)
        timer("sound",1)
    }
    printColor(vec(222,200,255),"[SeedRat] Type \"!seed <your seed here>\" in chat to change seed. Each seed MUST have 8 places. Symbols and Alphanumerics work.\nType \"!randseed\" to randomize it.")
    init("51GF)PRD")
}
runOnChat(1)
if(chatClk(owner())){
    if(owner():lastSaid():lower():sub(1,5) == "!seed"){
        NewSeed = owner():lastSaid():sub(7,owner():lastSaid():length())
        propDeleteAll()
        holoDeleteAll()
        init(NewSeed)
    }
    if(owner():lastSaid():lower():sub(1,11) == "!randomseed"){
        propDeleteAll()
        holoDeleteAll()
        init(randomseed())
    }
}
interval(100)
if(clk("sound")){
    if(randint(1,5) < 3){
        Rat:soundPlay(2,0,"ambient/atmosphere/hole_hit5.wav")
        soundPitch(2,randint(85,100))
    }else{
        Rat:soundPlay(1,0,"ambient/creatures/rats"+randint(1,4)+".wav")
    }
    soundVolume(1,0.5)
    timer("sound",1555)
}

rangerFilter(Rat)
Ranger = rangerOffset(111,Rat:toWorld(vec(11,0,11)),vec(0,0,-1))
rangerFilter(Rat)
TRG = owner():toWorld(vec(0,11,0))
Speed = round(srand(CurSeed))*0.2
print(Speed)
D = TRG:distance(Rat:pos())*0.09
Rat:setAng((TRG-Rat:pos()):toAngle():setPitch(0))

if(Rat:pos():distance(TRG) > 50){
    Rat:setPos(Rat:toWorld(vec(D*Speed,0,0)):setZ(Ranger:pos():z()+Ranger:distance()*0.3))
}
